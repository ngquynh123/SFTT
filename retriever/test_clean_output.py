#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test output s·∫°ch - ki·ªÉm tra kh√¥ng c√≥ k√Ω t·ª± l·∫°
"""

import os
import sys
import warnings
warnings.filterwarnings("ignore")

def test_clean_output():
    print("üß™ TEST OUTPUT S·∫†CH")
    print("=" * 40)
    
    try:
        from model_llm import build_llm, generate_answer
        
        model_path = r"D:\AI.LLM-khanh-no_rrf\models\phogpt4b-ft-merged"
        
        if not os.path.exists(model_path):
            print(f"‚ùå Model kh√¥ng t√¨m th·∫•y")
            return
        
        print("üöÄ Loading model...")
        llm = build_llm(
            model_path,
            temperature=0.0,
            max_new_tokens=20,  # Ng·∫Øn ƒë·ªÉ test
            use_onnx=False
        )
        
        # Test cases
        test_cases = [
            {
                "question": "Bi·ªÉn b√°o P.130 l√† g√¨?",
                "context": "Bi·ªÉn b√°o P.130 l√† bi·ªÉn c·∫•m √¥ t√¥."
            },
            {
                "question": "Lu·∫≠t giao th√¥ng quy ƒë·ªãnh g√¨?", 
                "context": "Lu·∫≠t giao th√¥ng quy ƒë·ªãnh v·ªÅ an to√†n ƒë∆∞·ªùng b·ªô."
            },
            {
                "question": "Ph·∫°t ngu·ªôi l√† g√¨?",
                "context": "Ph·∫°t ngu·ªôi l√† h√¨nh th·ª©c x·ª≠ ph·∫°t vi ph·∫°m giao th√¥ng qua camera."
            }
        ]
        
        for i, test in enumerate(test_cases, 1):
            print(f"\nüìù Test {i}: {test['question']}")
            
            result = generate_answer(
                llm,
                test['question'],
                test['context'],
                max_new_tokens=20,
                temperature=0.0
            )
            
            print(f"ü§ñ Output: '{result}'")
            
            # Ki·ªÉm tra output s·∫°ch
            issues = []
            if "ÔøΩ c·ªông" in result:
                issues.append("C√≥ k√Ω t·ª± l·∫°")
            if len(result) < 5:
                issues.append("Qu√° ng·∫Øn") 
            if len(set(result.replace(' ', ''))) < 3:
                issues.append("L·∫∑p k√Ω t·ª±")
            
            if issues:
                print(f"‚ö†Ô∏è  Issues: {', '.join(issues)}")
            else:
                print("‚úÖ Output s·∫°ch!")
        
        print(f"\nüéØ Test ho√†n th√†nh!")
        
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_clean_output()