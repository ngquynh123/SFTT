#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
T·∫°o ra 100 c√¢u h·ªèi ng·∫´u nhi√™n t·ª´ b√™n ngo√†i
Kh√¥ng li√™n quan ƒë·∫øn m√¥n h·ªçc, ch·ªß ƒë·ªÅ ƒëa d·∫°ng
"""

import json
import random
import os
from pathlib import Path

# Ng√¢n h√†ng c√¢u h·ªèi t·ªïng qu√°t theo ch·ªß ƒë·ªÅ
QUESTION_BANK = {
    "cuoc_song_hang_ngay": [
        "B·∫°n th∆∞·ªùng l√†m g√¨ v√†o cu·ªëi tu·∫ßn?",
        "M√≥n ƒÉn y√™u th√≠ch c·ªßa b·∫°n l√† g√¨?",
        "B·∫°n c√≥ th√≠ch du l·ªãch kh√¥ng?",
        "Th·ªùi ti·∫øt h√¥m nay nh∆∞ th·∫ø n√†o?",
        "B·∫°n th∆∞·ªùng d·∫≠y l√∫c m·∫•y gi·ªù?",
        "S·ªü th√≠ch c·ªßa b·∫°n l√† g√¨?",
        "B·∫°n c√≥ nu√¥i th√∫ c∆∞ng kh√¥ng?",
        "Lo·∫°i nh·∫°c n√†o b·∫°n th√≠ch nghe?",
        "B·∫°n c√≥ th√≠ch xem phim kh√¥ng?",
        "M√†u s·∫Øc y√™u th√≠ch c·ªßa b·∫°n l√† g√¨?",
        "B·∫°n th√≠ch m√πa n√†o trong nƒÉm?",
        "C√¥ng vi·ªác m∆° ∆∞·ªõc c·ªßa b·∫°n l√† g√¨?",
        "B·∫°n c√≥ th√≠ch n·∫•u ƒÉn kh√¥ng?",
        "Th√†nh ph·ªë n√†o b·∫°n mu·ªën ƒë·∫øn nh·∫•t?",
        "B·∫°n th∆∞·ªùng ƒë·ªçc s√°ch kh√¥ng?"
    ],
    
    "cong_nghe": [
        "Smartphone ƒë·∫ßu ti√™n b·∫°n d√πng l√† g√¨?",
        "B·∫°n th√≠ch iOS hay Android?",
        "AI s·∫Ω thay ƒë·ªïi cu·ªôc s·ªëng nh∆∞ th·∫ø n√†o?",
        "M·∫°ng x√£ h·ªôi n√†o b·∫°n d√πng nhi·ªÅu nh·∫•t?",
        "B·∫°n c√≥ s·ª£ robot kh√¥ng?",
        "Internet ƒë√£ thay ƒë·ªïi th·∫ø gi·ªõi nh∆∞ th·∫ø n√†o?",
        "Game y√™u th√≠ch c·ªßa b·∫°n l√† g√¨?",
        "B·∫°n c√≥ tin v√†o xe t·ª± l√°i kh√¥ng?",
        "C√¥ng ngh·ªá VR c√≥ t∆∞∆°ng lai kh√¥ng?",
        "Cryptocurrency c√≥ ph·∫£i l√† t∆∞∆°ng lai?",
        "B·∫°n th√≠ch mua s·∫Øm online hay offline?",
        "Laptop hay desktop t·ªët h∆°n?",
        "5G c√≥ th·ª±c s·ª± c·∫ßn thi·∫øt kh√¥ng?",
        "B·∫°n c√≥ lo v·ªÅ b·∫£o m·∫≠t d·ªØ li·ªáu kh√¥ng?",
        "Smartwatch c√≥ h·ªØu √≠ch kh√¥ng?"
    ],
    
    "van_hoa_xa_hoi": [
        "Truy·ªÅn th·ªëng n√†o c·ªßa Vi·ªát Nam b·∫°n y√™u th√≠ch?",
        "L·ªÖ h·ªôi n√†o b·∫°n th√≠ch nh·∫•t?",
        "Gia ƒë√¨nh c√≥ quan tr·ªçng kh√¥ng?",
        "B·∫°n nghƒ© g√¨ v·ªÅ vƒÉn h√≥a ph∆∞∆°ng T√¢y?",
        "Ng√¥n ng·ªØ n√†o kh√≥ h·ªçc nh·∫•t?",
        "B·∫°n c√≥ th√≠ch t√¨m hi·ªÉu vƒÉn h√≥a n∆∞·ªõc kh√°c kh√¥ng?",
        "Ngh·ªá thu·∫≠t c√≥ c·∫ßn thi·∫øt trong ƒë·ªùi s·ªëng?",
        "√Çm nh·∫°c truy·ªÅn th·ªëng c√≥ c√≤n gi√° tr·ªã?",
        "B·∫°n th√≠ch ki·∫øn tr√∫c c·ªï hay hi·ªán ƒë·∫°i?",
        "Th·∫ø h·ªá tr·∫ª c√≥ kh√°c th·∫ø h·ªá tr∆∞·ªõc?",
        "T√¥n gi√°o c√≥ vai tr√≤ g√¨ trong x√£ h·ªôi?",
        "B·∫°n nghƒ© g√¨ v·ªÅ h√¥n nh√¢n ƒë·ªìng gi·ªõi?",
        "Ph·ª• n·ªØ v√† nam gi·ªõi c√≥ b√¨nh ƒë·∫≥ng ch∆∞a?",
        "Gi√°o d·ª•c c√≥ ƒëang thay ƒë·ªïi?",
        "B·∫°n c√≥ tin v√†o s·ªë ph·∫≠n kh√¥ng?"
    ],
    
    "thien_nhien": [
        "ƒê·ªông v·∫≠t n√†o b·∫°n th√≠ch nh·∫•t?",
        "B·∫°n c√≥ lo v·ªÅ bi·∫øn ƒë·ªïi kh√≠ h·∫≠u kh√¥ng?",
        "Lo√†i hoa n√†o ƒë·∫πp nh·∫•t?",
        "ƒê·∫°i d∆∞∆°ng hay n√∫i r·ª´ng h·∫•p d·∫´n h∆°n?",
        "B·∫°n c√≥ th√≠ch c·∫Øm tr·∫°i kh√¥ng?",
        "Thi√™n nhi√™n c√≥ c·∫ßn ƒë∆∞·ª£c b·∫£o v·ªá?",
        "M√πa m∆∞a hay n·∫Øng d·ªÖ ch·ªãu h∆°n?",
        "B·∫°n c√≥ s·ª£ ƒë·ªông v·∫≠t hoang d√£ kh√¥ng?",
        "R·ª´ng Amazon c√≥ quan tr·ªçng kh√¥ng?",
        "B·∫°n th√≠ch ng·∫Øm sao kh√¥ng?",
        "N√∫i l·ª≠a c√≥ nguy hi·ªÉm kh√¥ng?",
        "Bi·ªÉn c√≥ b·ªã √¥ nhi·ªÖm nghi√™m tr·ªçng?",
        "B·∫°n c√≥ mu·ªën s·ªëng g·∫ßn thi√™n nhi√™n?",
        "Th·ª©c ƒÉn h·ªØu c∆° c√≥ t·ªët h∆°n?",
        "NƒÉng l∆∞·ª£ng t√°i t·∫°o c√≥ kh·∫£ thi kh√¥ng?"
    ],
    
    "giai_tri": [
        "Th·ªÉ lo·∫°i phim n√†o b·∫°n th√≠ch?",
        "Ca sƒ© n√†o b·∫°n nghe nhi·ªÅu nh·∫•t?",
        "B·∫°n c√≥ th√≠ch ƒëi karaoke kh√¥ng?",
        "S√°ch hay phim th√∫ v·ªã h∆°n?",
        "B·∫°n th√≠ch comedy hay drama?",
        "Ngh·ªá sƒ© n√†o b·∫°n th·∫ßn t∆∞·ª£ng?",
        "B·∫°n c√≥ th√≠ch ƒëi concert kh√¥ng?",
        "Game online hay offline hay h∆°n?",
        "B·∫°n th√≠ch xem th·ªÉ thao n√†o?",
        "Nh·∫°c Vi·ªát hay nh·∫°c n∆∞·ªõc ngo√†i?",
        "B·∫°n c√≥ bi·∫øt ch∆°i nh·∫°c c·ª• kh√¥ng?",
        "Phim ho·∫°t h√¨nh c√≥ ch·ªâ d√†nh cho tr·∫ª em?",
        "Reality show c√≥ th·ª±c t·∫ø kh√¥ng?",
        "B·∫°n th√≠ch ƒë·ªçc truy·ªán tranh kh√¥ng?",
        "TikTok c√≥ ·∫£nh h∆∞·ªüng g√¨ ƒë·∫øn gi·ªõi tr·∫ª?"
    ],
    
    "suc_khoe": [
        "B·∫°n c√≥ t·∫≠p th·ªÉ d·ª•c th∆∞·ªùng xuy√™n kh√¥ng?",
        "Yoga c√≥ t·ªët cho s·ª©c kh·ªèe?",
        "B·∫°n ng·ªß m·∫•y ti·∫øng m·ªói ng√†y?",
        "Stress c√≥ ·∫£nh h∆∞·ªüng ƒë·∫øn s·ª©c kh·ªèe?",
        "B·∫°n c√≥ ƒÉn chay kh√¥ng?",
        "N∆∞·ªõc c√≥ quan tr·ªçng nh∆∞ th·∫ø n√†o?",
        "B·∫°n c√≥ hay b·ªã ƒëau ƒë·∫ßu kh√¥ng?",
        "Vitamin c√≥ c·∫ßn thi·∫øt kh√¥ng?",
        "B·∫°n th√≠ch t·∫≠p gym hay ch·∫°y b·ªô?",
        "S·ª©c kh·ªèe tinh th·∫ßn c√≥ quan tr·ªçng?",
        "B·∫°n c√≥ hay th·ª©c khuya kh√¥ng?",
        "Fast food c√≥ h·∫°i nh∆∞ ng∆∞·ªùi ta n√≥i?",
        "B·∫°n c√≥ ƒëi kh√°m s·ª©c kh·ªèe ƒë·ªãnh k·ª≥?",
        "Thi·ªÅn c√≥ gi√∫p gi·∫£m stress?",
        "B·∫°n c√≥ th√≠ch massage kh√¥ng?"
    ],
    
    "du_lich": [
        "Qu·ªëc gia n√†o b·∫°n mu·ªën ƒë·∫øn nh·∫•t?",
        "B·∫°n th√≠ch du l·ªãch m·ªôt m√¨nh hay theo nh√≥m?",
        "Kh√°ch s·∫°n hay homestay t·ªët h∆°n?",
        "B·∫°n c√≥ s·ª£ ƒëi m√°y bay kh√¥ng?",
        "Du l·ªãch trong n∆∞·ªõc hay n∆∞·ªõc ngo√†i?",
        "B·∫°n th√≠ch mang v·ªÅ qu√† g√¨ khi du l·ªãch?",
        "T√∫i x√°ch hay vali ti·ªán h∆°n?",
        "B·∫°n c√≥ th√≠ch ch·ª•p ·∫£nh du l·ªãch kh√¥ng?",
        "M√πa n√†o th√≠ch h·ª£p du l·ªãch nh·∫•t?",
        "B·∫°n c√≥ th√≠ch ƒëi ph∆∞·ª£t kh√¥ng?",
        "Du l·ªãch b·ª•i c√≥ an to√†n kh√¥ng?",
        "B·∫°n th√≠ch bi·ªÉn hay n√∫i?",
        "Guide tour c√≥ c·∫ßn thi·∫øt kh√¥ng?",
        "B·∫°n c√≥ mu·ªën s·ªëng ·ªü n∆∞·ªõc ngo√†i?",
        "Du l·ªãch c√≥ t·ªën k√©m kh√¥ng?"
    ]
}

def generate_random_questions(n_questions=100):
    """T·∫°o ra n_questions c√¢u h·ªèi ng·∫´u nhi√™n t·ª´ ng√¢n h√†ng c√¢u h·ªèi"""
    
    # G·ªôp t·∫•t c·∫£ c√¢u h·ªèi t·ª´ c√°c ch·ªß ƒë·ªÅ
    all_questions = []
    for category, questions in QUESTION_BANK.items():
        for question in questions:
            all_questions.append({
                'question': question,
                'category': category
            })
    
    # Tr·ªôn ng·∫´u nhi√™n
    random.shuffle(all_questions)
    
    # Ch·ªçn s·ªë l∆∞·ª£ng c√¢u h·ªèi y√™u c·∫ßu
    if len(all_questions) <= n_questions:
        selected = all_questions
    else:
        selected = random.sample(all_questions, n_questions)
    
    return selected

def save_questions_json(questions, output_path):
    """L∆∞u c√¢u h·ªèi ra file JSON"""
    
    # Th·ªëng k√™ theo category
    category_stats = {}
    for item in questions:
        cat = item['category']
        category_stats[cat] = category_stats.get(cat, 0) + 1
    
    output_data = {
        "description": "100 c√¢u h·ªèi ng·∫´u nhi√™n ƒëa ch·ªß ƒë·ªÅ",
        "total_questions": len(questions),
        "categories": category_stats,
        "questions": [
            {
                "id": i+1, 
                "question": item['question'],
                "category": item['category']
            } 
            for i, item in enumerate(questions)
        ]
    }
    
    with open(output_path, 'w', encoding='utf-8') as f:
        json.dump(output_data, f, ensure_ascii=False, indent=2)
    
    print(f"‚úÖ ƒê√£ l∆∞u {len(questions)} c√¢u h·ªèi (JSON) t·∫°i: {output_path}")

def save_questions_txt(questions, output_path):
    """L∆∞u c√¢u h·ªèi ra file text thu·∫ßn"""
    
    with open(output_path, 'w', encoding='utf-8') as f:
        f.write("100 C√ÇU H·ªéI NG·∫™U NHI√äN ƒêA CH·ª¶ ƒê·ªÄ\n")
        f.write("=" * 50 + "\n\n")
        
        current_category = None
        for i, item in enumerate(questions, 1):
            # Hi·ªÉn th·ªã category n·∫øu thay ƒë·ªïi
            if item['category'] != current_category:
                current_category = item['category']
                f.write(f"\n--- {current_category.upper().replace('_', ' ')} ---\n")
            
            f.write(f"{i:3d}. {item['question']}\n")
        
        f.write(f"\n\n{'='*50}\n")
        f.write("TH·ªêNG K√ä THEO CH·ª¶ ƒê·ªÄ:\n")
        
        # Th·ªëng k√™
        category_stats = {}
        for item in questions:
            cat = item['category']
            category_stats[cat] = category_stats.get(cat, 0) + 1
        
        for cat, count in category_stats.items():
            percentage = (count / len(questions)) * 100
            f.write(f"- {cat.replace('_', ' ').title()}: {count} c√¢u ({percentage:.1f}%)\n")
    
    print(f"‚úÖ ƒê√£ l∆∞u {len(questions)} c√¢u h·ªèi (TXT) t·∫°i: {output_path}")

def main():
    # Setup
    output_dir = Path(r"D:\AI.LLM-khanh-no_rrf\data\test_data")
    output_dir.mkdir(parents=True, exist_ok=True)
    
    n_questions = 100
    
    print("üé≤ T·∫†O C√ÇU H·ªéI NG·∫™U NHI√äN ƒêA CH·ª¶ ƒê·ªÄ")
    print("=" * 60)
    print(f"üéØ S·ªë c√¢u h·ªèi: {n_questions}")
    print(f"üìÇ Th∆∞ m·ª•c output: {output_dir}")
    print("=" * 60)
    
    # Set random seed
    random.seed(42)
    
    # Th·ªëng k√™ ng√¢n h√†ng c√¢u h·ªèi
    total_available = sum(len(questions) for questions in QUESTION_BANK.values())
    print(f"\nüìä NG√ÇN H√ÄNG C√ÇU H·ªéI:")
    print(f"üìù T·ªïng s·ªë c√¢u h·ªèi c√≥ s·∫µn: {total_available}")
    
    for category, questions in QUESTION_BANK.items():
        print(f"   - {category.replace('_', ' ').title()}: {len(questions)} c√¢u")
    
    # T·∫°o c√¢u h·ªèi ng·∫´u nhi√™n
    print(f"\nüé≤ T·∫°o {n_questions} c√¢u h·ªèi ng·∫´u nhi√™n...")
    selected_questions = generate_random_questions(n_questions)
    
    # Th·ªëng k√™ k·∫øt qu·∫£
    category_stats = {}
    for item in selected_questions:
        cat = item['category']
        category_stats[cat] = category_stats.get(cat, 0) + 1
    
    print(f"\nüìä PH√ÇN B·ªê THEO CH·ª¶ ƒê·ªÄ:")
    for category, count in sorted(category_stats.items()):
        percentage = (count / len(selected_questions)) * 100
        print(f"   - {category.replace('_', ' ').title()}: {count} c√¢u ({percentage:.1f}%)")
    
    # L∆∞u file
    json_output = output_dir / "random_100_general_questions.json"
    txt_output = output_dir / "random_100_general_questions.txt"
    
    save_questions_json(selected_questions, json_output)
    save_questions_txt(selected_questions, txt_output)
    
    print("\n" + "=" * 60)
    print("üéâ HO√ÄN TH√ÄNH!")
    print(f"üìä ƒê√£ t·∫°o {len(selected_questions)} c√¢u h·ªèi ƒëa ch·ªß ƒë·ªÅ")
    print(f"üìÑ File JSON: {json_output.name}")
    print(f"üìÑ File TXT: {txt_output.name}")
    print("=" * 60)
    
    # Preview
    print(f"\nüîç PREVIEW 10 C√ÇU H·ªéI ƒê·∫¶U:")
    for i, item in enumerate(selected_questions[:10], 1):
        category_display = item['category'].replace('_', ' ').title()
        print(f"{i:2d}. [{category_display}] {item['question']}")

if __name__ == "__main__":
    main()